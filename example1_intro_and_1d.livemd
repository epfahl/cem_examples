# Example 1: Intro and 1D optimization

```elixir
Mix.install(
  [
    {:cem, git: "https://github.com/epfahl/cem.git"},
    {:kino_vega_lite, "~> 0.1.10"}
  ],
  force: true
)
```

## Defining the problem

The specification of a `CEM` problem requires a handful of functions that describe the steps of the search. A user provides these functions as a keyword list in `CEM.new/1`. Here's a schematic example:

<!-- livebook:{"force_markdown":true} -->

```elixir
CEM.new([
  init: fn opts -> 
    # initialize params of probability distribution
  end,
  draw: fn params -> 
    # draw a random candidate solution instance
  end,
  score: fn instance -> 
    # score a candidate solution instance
  end,
  update: fn [instance] -> 
    # udpate params from sample of instances
  end,
  smooth: fn params_new, params_prev, f_smooth -> 
    # smooth params
  end,
  terminate?: fn log, opts -> 
    # decide if the CEM search should be stopped
  end,
  params_to_instance: fn opts -> 
    # convert params to the most likely candidate solution instance
  end
])
```

<!-- livebook:{"break_markdown":true} -->

`CEM.new/1` returns a `CEM.Problem` struct that has exactly same structure as the keyword list above. Since the struct is just data, it's especially easy to work with interactively.

<!-- livebook:{"break_markdown":true} -->

One reasonable pattern for capturing the key elements of a `CEM` problem is to provide some or all of the needed functions in a module. For example, suppose we want a framework that allows us to solve any one-dimensional optimization problem, but we want the flexibility to swap out the objective (score) function. The core implementation might look something like this:

```elixir
defmodule OneD do
  alias CEM.Random

  def init(_opts), do: %{mean: 0, std: 30}

  def draw(%{mean: mean, std: std}), do: Random.normal(mean, std)

  def update(sample) do
    n = length(sample)
    mean = sample_mean(sample, n)
    std = sample_std(sample, n, mean)
    %{mean: mean, std: std}
  end

  def smooth(params, params_prev, f_smooth) do
    %{
      mean: smooth_scalar(params.mean, params_prev.mean, f_smooth),
      std: smooth_scalar(params.std, params_prev.std, f_smooth)
    }
  end

  def terminate?([entry | _] = _log, _opts), do: entry.params.std < 0.001

  def params_to_instance(%{mean: mean}), do: mean

  defp sample_mean(sample, n), do: Enum.sum(sample) / n

  defp sample_std(sample, n, mean) do
    sample
    |> Enum.map(&((&1 - mean) * (&1 - mean)))
    |> Enum.sum()
    |> Kernel./(n)
    |> :math.sqrt()
  end

  defp smooth_scalar(x, x_prev, f), do: f * x + (1 - f) * x_prev
end
```

This module provides all of the functions needed by `CEM.new/1`, except for `score`.

Note that `CEM.Random` has a handful of functions for generating random variates. These functions are here for convenience. The user is free to use any source of random numbers.

<!-- livebook:{"break_markdown":true} -->

As a concrete example, let the score function be a truncated parabola:

$$
\begin{equation}
f(x) = 
  \begin{cases}

```
1 - x^2\,, & -1\leq x \leq 1 \\
0\,, & \textrm{else}~
```

\end{cases}
\end{equation}
$$

In code, this is

```elixir
score_parabola = fn x -> if abs(x) <= 1, do: 1 - x * x, else: 0 end
```

This function has a maximum at $x = 0$, as shown in the chart below.

```elixir
x = for i <- 1..100, do: -3 + 6 * i / 100
y = Enum.map(x, score_parabola)
data = %{x: x, y: y}

:ok
```

<!-- livebook:{"attrs":{"chart_title":null,"height":200,"layers":[{"active":true,"chart_type":"line","color_field":null,"color_field_aggregate":null,"color_field_bin":null,"color_field_scale_scheme":null,"color_field_type":null,"data_variable":"data","geodata_color":"blue","latitude_field":null,"longitude_field":null,"x_field":"x","x_field_aggregate":null,"x_field_bin":null,"x_field_scale_type":null,"x_field_type":"quantitative","y_field":"y","y_field_aggregate":null,"y_field_bin":null,"y_field_scale_type":null,"y_field_type":"quantitative"}],"vl_alias":"Elixir.VegaLite","width":500},"chunks":null,"kind":"Elixir.KinoVegaLite.ChartCell","livebook_object":"smart_cell"} -->

```elixir
VegaLite.new(width: 500, height: 200)
|> VegaLite.data_from_values(data, only: ["x", "y"])
|> VegaLite.mark(:line)
|> VegaLite.encode_field(:x, "x", type: :quantitative)
|> VegaLite.encode_field(:y, "y", type: :quantitative)
```

With the `OneD` module and this score function, the full problem definition is

```elixir
prob =
  CEM.new(
    init: &OneD.init/1,
    draw: &OneD.draw/1,
    score: score_parabola,
    update: &OneD.update/1,
    smooth: &OneD.smooth/3,
    terminate?: &OneD.terminate?/2,
    params_to_instance: &OneD.params_to_instance/1
  )
```

## Searching for the solution

`CEM.search/2` applies the CEM optimization algorithm to the defined problem, where the first argument is the `CEM.Problem` struct, and the second argument is a keyword list of optional parameters. With the default options, the search is executed as

```elixir
CEM.search(prob)
```

The search should converge to a `solution` that is close to the correct maximum. The search can be tuned by changing the number of samples, the elite fraction, or the amount of smoothing:

```elixir
CEM.search(prob, n_sample: 1000, f_elite: 0.05, f_smooth: 0.8)
```

## Updating the problem

Suppose we're satisfied the basic problem structure given above, but we'd like to replace certain pieces with new implementations. This is the purpose of `CEM.replace/3`, which takes as arguments a problem, a function key, and a new function implementation.

To illustrate the usage of `CEM.replace/3`, here are function generators for `init` and `score` that make it easy to adjust the implementations

```elixir
init_gen = fn mean, std ->
  fn _ -> %{mean: mean, std: std} end
end

score_gauss_gen = fn center ->
  fn x -> :math.exp(-(x - center) * (x - center)) end
end
```

Now pipe the original problem definition through these replacements and execute the search:

```elixir
prob
|> CEM.replace(:init, init_gen.(2, 10))
|> CEM.replace(:score, score_gauss_gen.(2))
|> CEM.search()
```

`CEM` offers lots of flexibility in how problems are defined and altered during the course of exploration. This is especially convenient in a Livebook.
